// *Minified.

let savedColorList=[],colorHold="#d35252";const html={selectedColor:document.querySelector(".col"),resultColor:{hex:document.querySelector(".result-color__hex span"),rgb:document.querySelectorAll(".result-color__rgb .fade")},fullValue:{rgb:document.querySelectorAll(".copy-value")[0]},copy:{copyHex:document.querySelector(".copy-hex"),copyHexButton:document.querySelectorAll("button")[0],copyRgb:document.querySelector(".copy-rgb"),copyRgbButton:document.querySelectorAll("button")[1]},savedColorContainer:document.querySelector(".result-color__saved"),extraButton:{saveColor:document.querySelector(".save-color"),removeAllColor:document.querySelector(".remove-all-color")}};class ColorPicker{constructor(a){this.color=a}}const joe=colorjoe.rgb(document.querySelector(".colorjoe-color-picker"),"red");joe.on("change",b=>{colorHold=b.hex(),html.selectedColor.style.background=b.hex(),html.resultColor.hex.innerText=b.hex(),html.copy.copyHex.innerText=b.hex();let a=b.css().replace("rgb(","").slice(0,-1).split(",");html.resultColor.rgb[0].innerText=a[0],html.resultColor.rgb[1].innerText=a[1],html.resultColor.rgb[2].innerText=a[2],html.fullValue.rgb.innerText=`rgb(${a[0]}, ${a[1]}, ${a[2]})`,html.copy.copyRgb.innerText=`rgb(${a[0]}, ${a[1]}, ${a[2]})`,storage.saveLastSelectedColor()});const extraFunction={saveColor:function(){let a=new ColorPicker(colorHold),b=`<span style="background: ${colorHold}" onclick="extraFunction.chooseColor(this)" oncontextmenu="extraFunction.removeColor(this)"></span>`,c=savedColorList.some(a=>a.color===colorHold);c||("Empty."==html.savedColorContainer.innerText&&(html.savedColorContainer.innerText=""),html.savedColorContainer.innerHTML+=b,savedColorList.push(a),storage.saveSavedColor())},removeColor:function(c){let b=c,d=`#${(0,b.style.background).match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+\.{0,1}\d*))?\)$/).slice(1).map((a,b)=>(3===b?Math.round(255*parseFloat(a)):parseFloat(a)).toString(16).padStart(2,"0").replace("NaN","")).join("")}`;for(let a=0;a<=savedColorList.length;a++)if(savedColorList[a].color==d){savedColorList.splice(a,1);break}b.remove(),0==html.savedColorContainer.childElementCount&&(html.savedColorContainer.innerText="Empty."),storage.saveSavedColor()},removeAllColor:function(){html.savedColorContainer.innerText="Empty.",savedColorList=[],storage.saveSavedColor()},chooseColor:function(a){let b=a.style.background;joe.set(b)},copyButton:{copyHex:function(){let a=document.querySelector(".copied-hex");navigator.clipboard.writeText(html.resultColor.hex.innerText),a.style.display="inline",setTimeout(()=>a.style.display="none",1e3)},copyRgb:function(){let a=document.querySelector(".copied-rgb");navigator.clipboard.writeText(html.fullValue.rgb.innerText),a.style.display="inline",setTimeout(()=>a.style.display="none",1e3)}}};html.copy.copyHexButton.addEventListener("click",extraFunction.copyButton.copyHex),html.copy.copyRgbButton.addEventListener("click",extraFunction.copyButton.copyRgb),html.extraButton.saveColor.addEventListener("click",extraFunction.saveColor),html.extraButton.removeAllColor.addEventListener("dblclick",extraFunction.removeAllColor);const storageKey="Saved_Color",storageKeyTwo="Last_Selected_Color",storage={saveSavedColor:function(){let a=JSON.stringify(savedColorList);localStorage.setItem(storageKey,a)},loadSavedColor:function(){let d=localStorage.getItem(storageKey),a=JSON.parse(d);for(let b=0;b<a.length;b++){let e=a[b].color,f=new ColorPicker(e);savedColorList.push(f)}0==savedColorList.length?html.savedColorContainer.innerText="Empty.":html.savedColorContainer.innerText="";for(let c=0;c<a.length;c++){let g=`<span style="background: ${a[c].color}" onclick="extraFunction.chooseColor(this)" oncontextmenu="extraFunction.removeColor(this)"></span>`;html.savedColorContainer.innerHTML+=g}},saveLastSelectedColor:function(){let a=colorHold;localStorage.setItem(storageKeyTwo,a)},loadLastSelectedColor:function(){let a=localStorage.getItem(storageKeyTwo);joe.set(a)}};document.addEventListener("DOMContentLoaded",()=>{storage.loadSavedColor(),storage.loadLastSelectedColor()});const jsonColor="assets/css-color-names.json",tableBasicColor=document.querySelector(".color-list__basic"),tableExtendedColor=document.querySelector(".color-list__extended");function generateColorList(a){let f=Object.keys(a.basic),h=Object.values(a.basic),g=Object.keys(a.extended),i=Object.values(a.extended);for(let b=0;b<f.length;b++){let j=f[b],d=h[b],k=hexToRgb(d).rgb,l=`<tr>
                            <td>${j}</td>
                            <td>${d}</td>
                            <td>${k}</td>
                            <td><button style="background: ${d};" onclick="extraFunction.chooseColor(this)"></button></td>
                        </tr>`;tableBasicColor.innerHTML+=l}for(let c=0;c<g.length;c++){let m=g[c],e=i[c],n=hexToRgb(e).rgb,o=`<tr>
                            <td>${m}</td>
                            <td>${e}</td>
                            <td>${n}</td>
                            <td><button style="background: ${e};" onclick="extraFunction.chooseColor(this)"></button></td>
                        </tr>`;tableExtendedColor.innerHTML+=o}}function hexToRgb(b){let a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(b);return a?{rgb:`rgb(${parseInt(a[1],16)}, ${parseInt(a[2],16)}, ${parseInt(a[3],16)})`}:null}fetch("assets/css-color-names.json").then(a=>a.json()).then(generateColorList).catch(a=>{tableBasicColor.innerHTML="Failed to fetch.",tableExtendedColor.innerHTML="Failed to fetch.",console.error(a)})